		;		This template is provided by Aaron Carpenter
		;		ELEC 3275 - Computer Architecture

		;		Create and initialize array
		;		Load array address into R0
		;		Create loop counter in R1 initialized to 0
		;		Multiply 4 times index to account for words 32-bit size, resulting value in R2
		;		Load value from array address R0 at index R2 into R3
		;		Add 4 to address index R2 to move to next array element
		;		Load value from array address R0 at index R2 into R4
		;		Add the values from both indexes, R3 and R4, resulting value in R4
		;		Store value in R4 in the array at the R2 address
		;		Compare the look counter to 6
		;		Add 1 to the loop counter
		;		Loop back if loop != 6
		
Array	DCD		11111111, 22222222, 33333333, 44444444, 55555555, 66666666, 77777777, 88888888
		
		LDR		R0, =Array	; R0 Address = Array Address[0]
		LDR		R1, =0		; R1 Value = i = 1
Loop		LSL		R2, R1, #2	; R2 Value = i * 4 => adjustment to word memory indexing
		LDR		R3, [R0, R2]	; R3 Value = Array.index(i) = Array.addressIndex(i*4)
		ADD		R2, R2, #4	; R2 = Array.addressIndex(i*4 +4)=Array.index(i+1)
		LDR		R4, [R0, R2]	; R4 Value = Array.index(i+1) = Array.addressIndex(i*4 +4)
		ADD		R4, R4, R3	; R4 Value = Array.index(i)+Array.index(i+1)
		STR		R4, [R0, R2]	; Array.addressIndex(i+1) = R4 Value
		CMP		R1, #6		; Set flags for i == 6
		ADD		R1, R1, #1	; i = i + 1
		BNE		Loop			; Loop if i != 6
		END
